import java.nio.charset.StandardCharsets

apply plugin: 'org.inferred.processors'

apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.revapi'

dependencies {
    api "com.fasterxml.jackson.core:jackson-databind"
    api "com.palantir.conjure.java.api:ssl-config"
    implementation "com.google.guava:guava"
    implementation 'com.palantir.safe-logging:logger'
    implementation "com.palantir.safe-logging:preconditions"
    implementation "com.github.ben-manes.caffeine:caffeine"

    testImplementation project(":conjure-java-jackson-serialization")
    testImplementation project(":undertow-jakarta-testing")
    testImplementation("com.netflix.feign:feign-jaxrs") {
        // the shipped version clashes with the newer javax.ws.rs:javax.ws.rs-api used by (e.g.) dropwizard
        exclude group: "javax.ws.rs", module: "jsr311-api"
    }
    testImplementation("com.netflix.feign:feign-core")
    testImplementation "com.netflix.feign:feign-okhttp"
    testImplementation "com.squareup.okhttp3:okhttp"
    testImplementation "org.conscrypt:conscrypt-openjdk-uber"
    testImplementation "org.hamcrest:hamcrest-all"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.junit.jupiter:junit-jupiter"

    annotationProcessor "org.immutables:value"
    compileOnly 'org.immutables:value::annotations'
}

task generateCerts(type:Exec) {
  workingDir './src/test/resources'
  commandLine './certSetup.sh', '-f'
}

// requires java 11
task regenerateCAs(type: Exec) {
    outputs.cacheIf { false }
    commandLine 'bash', '-c', '$JAVA_HOME/bin/keytool -list -cacerts -rfc'
    def outputStream = new ByteArrayOutputStream();
    doFirst {
        standardOutput outputStream
    }
    doLast {
        def normalizedOutput = outputStream.toString(StandardCharsets.UTF_8).replaceAll("\\r\\n", "\n")
        file("src/main/resources/ca-certificates.crt").newWriter().withWriter { w ->
            w << normalizedOutput
        }
        if (System.env.CIRCLE_ARTIFACTS) {
            file("${System.env.CIRCLE_ARTIFACTS}/ca-certificates.crt") << normalizedOutput
        }
    }
}

task checkCAsNeedUpdating(type: Exec, dependsOn: regenerateCAs) {
    commandLine 'git', 'diff', '--quiet', 'HEAD', 'src/main/resources/ca-certificates.crt'
}

if (System.getenv().containsKey("CI")) {
    tasks.test.dependsOn checkCAsNeedUpdating
}

tasks.test.dependsOn(generateCerts)
