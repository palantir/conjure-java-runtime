apply plugin: 'org.inferred.processors'

apply from: "${rootDir}/gradle/publish-jar.gradle"
apply plugin: 'com.palantir.revapi'

dependencies {
    api "com.fasterxml.jackson.core:jackson-databind"
    api "com.palantir.conjure.java.api:ssl-config"
    implementation "com.google.guava:guava"
    implementation "com.palantir.safe-logging:preconditions"

    testImplementation project(":conjure-java-jackson-serialization")
    testImplementation("com.netflix.feign:feign-jaxrs") {
        // the shipped version clashes with the newer javax.ws.rs:javax.ws.rs-api used by (e.g.) dropwizard
        exclude group: "javax.ws.rs", module: "jsr311-api"
    }
    testImplementation("com.netflix.feign:feign-core")
    testImplementation "com.netflix.feign:feign-okhttp"
    testImplementation "com.squareup.okhttp3:okhttp"
    testImplementation "org.hamcrest:hamcrest-all"
    testImplementation("io.dropwizard:dropwizard-core") { exclude module: 'metrics-core' }
    testImplementation("io.dropwizard:dropwizard-testing") { exclude module: 'metrics-core' }
    testImplementation "io.dropwizard.metrics:metrics-core"
    testImplementation "junit:junit"

    annotationProcessor "org.immutables:value"
    compileOnly 'org.immutables:value::annotations'
}

task generateCerts(type:Exec) {
  workingDir './src/test/resources'
  commandLine './certSetup.sh', '-f'
}

task testBouncyCastle(type: Test) {
    configureTestTask(it, 'bouncy-castle')
    tasks.test.dependsOn(it)
}

task testSun(type: Test) {
    configureTestTask(it, 'sun')
    tasks.test.dependsOn(it)
}

[tasks.testBouncyCastle, tasks.testSun].each { it.dependsOn(generateCerts) }


private void configureTestTask(Test test, String name) {
    test.classpath = test.classpath + project(":pkcs1-reader-${name}").sourceSets.main.getOutput() +
            project(":pkcs1-reader-${name}").sourceSets.main.runtimeClasspath

    test.reports.junitXml.destination file("${project.test.reports.junitXml.getDestination().absolutePath}-${name}")
    test.reports.html.destination file("${project.test.reports.html.getDestination().absolutePath}-${name}")

    project.plugins.withType(JacocoPlugin) {
        ((JacocoTaskExtension) test.jacoco).destinationFile = project.file("${project.getBuildDir()}/jacoco/${name}.exec")
    }
}
