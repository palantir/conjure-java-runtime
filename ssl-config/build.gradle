apply plugin: 'org.inferred.processors'

apply from: "${rootDir}/gradle/libs.gradle"
apply from: "${rootDir}/gradle/publish.gradle"

dependencies {
    compile libs.guava
    compile libs.jackson.databind

    testCompile libs.dropwizard.core
    testCompile libs.dropwizard.testing
    testCompile (libs.feign.jaxrs) {
        // the shipped version clashes with the newer javax.ws.rs:javax.ws.rs-api used by (e.g.) dropwizard
        exclude group: 'javax.ws.rs', module: 'jsr311-api'
    }
    testCompile project(':ext:feign-okhttp3')
    testCompile libs.hamcrest
    testCompile libs.junit

    processor libs.immutables.value
}

task generateCerts(type:Exec) {
  workingDir './src/test/resources'
  commandLine './certSetup.sh', '-f'
}

tasks.test.dependsOn(generateCerts)

task testBouncyCastle(type: Test) {
    configureTestTask(it, 'bouncy-castle')
}

task testSun(type: Test) {
    configureTestTask(it, 'sun')
}

private void configureTestTask(Test test, String name) {
    test.classpath = test.classpath + project(":pkcs1-reader-${name}").sourceSets.main.getOutput() +
            project(":pkcs1-reader-${name}").sourceSets.main.runtimeClasspath

    test.reports.junitXml.destination("${project.test.reports.junitXml.getDestination().absolutePath}-${name}")
    test.reports.html.destination("${project.test.reports.html.getDestination().absolutePath}-${name}")

    project.plugins.withType(JacocoPlugin) {
        ((JacocoTaskExtension) test.jacoco).destinationFile = project.file("${project.getBuildDir()}/jacoco/${name}.exec")
    }
}
