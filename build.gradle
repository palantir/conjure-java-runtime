buildscript {
    repositories {
        jcenter()
        maven { url "http://palantir.bintray.com/releases" }
    }

    dependencies {
        classpath 'gradle.plugin.com.palantir:gradle-circle-style:1.1.2'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.3'
        classpath 'com.netflix.nebula:gradle-dependency-lock-plugin:4.9.5'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:6.0.0'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:5.1.5'
        classpath 'com.palantir.baseline:gradle-baseline-java:0.17.1'
        classpath 'com.palantir.configurationresolver:gradle-configuration-resolver-plugin:0.3.0'
    }
}

plugins {
    id 'com.palantir.git-version' version '0.11.0'
    id 'org.inferred.processors' version '1.2.15'
}

apply plugin: 'com.palantir.baseline-config' // provides baselineUpdateConfig task
apply plugin: 'com.palantir.baseline-idea'
apply plugin: 'com.palantir.circle.style'

repositories {
    maven { url  "http://palantir.bintray.com/releases" }
}

dependencies {
    baseline "com.palantir.baseline:gradle-baseline-java-config:0.17.1@zip"
}

allprojects {
    version gitVersion()
    group 'com.palantir.remoting3'

    apply plugin: 'com.palantir.configuration-resolver'
    apply plugin: 'nebula.dependency-recommender'
    dependencyRecommendations {
        strategy OverrideTransitives
        propertiesFile file: project.rootProject.file('versions.props')
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.palantir.baseline-checkstyle'
    apply plugin: 'com.palantir.baseline-eclipse'
    apply plugin: 'com.palantir.baseline-idea'
    apply plugin: 'com.palantir.baseline-error-prone'

    repositories {
        jcenter()
        maven { url "http://palantir.bintray.com/releases" }
    }

    sourceCompatibility = 1.8

    apply plugin: 'nebula.dependency-lock'
    dependencyLock {
        includeTransitives = true
        lockFile = 'versions.lock'
        configurationNames = ['runtime', 'compileClasspath']
    }

    task verifyDependencyLocksAreCurrent {
        doLast {
            def expectedDependencies = tasks.saveLock.getOutputLock()
            def actualDependencies = tasks.saveLock.getGeneratedLock()
            def digester = java.security.MessageDigest.getInstance('SHA')
            logger.info("Verifying integrity of dependency locks: {} vs {}", expectedDependencies, actualDependencies)
            if (digester.digest(expectedDependencies.bytes) != digester.digest(actualDependencies.bytes)) {
                throw new GradleException("The dependencies of project " + project.name + " do not match the expected "
                    + "dependencies recorded in " + expectedDependencies + ". "
                    + "Run `./gradlew generateLock saveLock` and commit the updated version.lock files")
            }
        }
    }
    verifyDependencyLocksAreCurrent.dependsOn(generateLock)
    build.dependsOn(verifyDependencyLocksAreCurrent)

    tasks.withType(Javadoc) {
        // suppress Javadoc doclint warnings in Java 8+
        if (!System.getProperty("java.version").startsWith("1.7")) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    tasks.check.dependsOn(javadoc)

    test {
        minHeapSize = "512m"
        maxHeapSize = "512m"
    }

    configurations.errorprone {
        resolutionStrategy {
            force 'com.google.guava:guava:21.0'
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-XepDisableWarningsInGeneratedCode']
    }
}
