buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${bintrayPlugin}"
        classpath 'com.netflix.nebula:gradle-dependency-lock-plugin:4.2.0'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:3.1.0'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.8.1'
        classpath "com.palantir:gradle-baseline-java:${baselineVersion}"
        classpath 'gradle.plugin.com.palantir.configurationresolver:gradle-configuration-resolver-plugin:0.1.0' 
    }
}

plugins {
    id 'com.palantir.git-version' version '0.2.0'
    id 'org.inferred.processors' version '1.2.2'
}

apply plugin: 'com.palantir.baseline-config' // provides baselineUpdateConfig task
apply plugin: 'com.palantir.baseline-idea'

repositories {
    jcenter() // needed for baselineUpdateConfig task
}

allprojects {
    version System.env.CIRCLE_TAG ?: gitVersion()
    group 'com.palantir.remoting1'

    apply plugin: 'com.palantir.configuration-resolver'
    apply plugin: 'nebula.dependency-recommender'
    dependencyRecommendations {
        propertiesFile file: project.rootProject.file('versions.props')
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.palantir.baseline-checkstyle'
    apply plugin: 'com.palantir.baseline-eclipse'
    apply plugin: 'com.palantir.baseline-findbugs'
    apply plugin: 'com.palantir.baseline-idea'

    repositories {
        jcenter()
    }

    sourceCompatibility = 1.8

    apply plugin: 'nebula.dependency-lock'
    dependencyLock {
        includeTransitives = true
        lockFile = 'versions.lock'
        configurationNames = ['runtime', 'compileClasspath']
    }
    task verifyDependencyLocksAreCurrent << {
        def expectedDependencies = tasks.saveLock.getOutputLock()
        def actualDependencies = tasks.saveLock.getGeneratedLock()
        def digester = java.security.MessageDigest.getInstance('SHA')
        logger.info("Verifying integrity of dependency locks: {} vs {}", expectedDependencies, actualDependencies)
        if (digester.digest(expectedDependencies.bytes) != digester.digest(actualDependencies.bytes)) {
            throw new GradleException("The dependencies of project " + project.name + " do not match the expected "
                + "dependencies recorded in " + expectedDependencies + ". "
                + "Run `./gradlew generateLock saveLock` and commit the updated version.lock files")
        }
    }

    tasks.withType(Javadoc) {
        // suppress Javadoc doclint warnings in Java 8+
        if (!System.getProperty("java.version").startsWith("1.7")) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    tasks.check.dependsOn(javadoc)

    if (System.env.CIRCLE_TEST_REPORTS) {
        test.reports.junitXml.destination = new File(System.env.CIRCLE_TEST_REPORTS, it.getName())
    }

    test {
        minHeapSize = "512m"
        maxHeapSize = "512m"
    }
}
